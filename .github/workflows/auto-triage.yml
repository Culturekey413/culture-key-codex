name: Auto Triage → Status updates

on:
  issues:
    types: [labeled, assigned, reopened, edited, closed]
  pull_request:
    types: [opened, ready_for_review, review_requested, closed]

jobs:
  route_by_labels_and_events:
    runs-on: ubuntu-latest
    steps:
      - name: Move issue/pr through Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECTS_TOKEN }}
          script: |
            const OWNER = "Culturekey413";
            const PROJECT_NUMBER = 2;

            // Helper: fetch Project + Status field + option IDs
            async function getProjectAndStatus(github){
              const q = await github.graphql(`
                query($owner:String!, $number:Int!){
                  user(login:$owner){
                    projectV2(number:$number){
                      id
                      fields(first:50){
                        nodes{
                          ... on ProjectV2SingleSelectField{
                            id name
                            options{ id name }
                          }
                          ... on ProjectV2FieldCommon{ id name }
                        }
                      }
                    }
                  }
                }`, { owner: OWNER, number: PROJECT_NUMBER });
              const project = q.user.projectV2;
              const status = project.fields.nodes.find(f => f.name === "Status" && f.options);
              const opt = n => status.options.find(o => o.name.toLowerCase() === n.toLowerCase());
              return { project, status, opt };
            }

            // Resolve content (issue or PR) node_id
            const isIssueEvt = !!context.payload.issue;
            const nodeId = isIssueEvt ? context.payload.issue.node_id : context.payload.pull_request.node_id;

            // Add to project (no-op if exists)
            const { project, status, opt } = await getProjectAndStatus(github);
            let itemId;
            try{
              const addRes = await github.graphql(`
                mutation($pid:ID!, $cid:ID!){
                  addProjectV2ItemById(input:{projectId:$pid, contentId:$cid}){ item{ id } }
                }`, { pid: project.id, cid: nodeId });
              itemId = addRes.addProjectV2ItemById.item.id;
            }catch(e){
              // already added – best effort lookup
              const search = await github.graphql(`
                query($owner:String!, $number:Int!){
                  user(login:$owner){ projectV2(number:$number){ items(first:100){ nodes{ id content{ ... on Issue{ id } ... on PullRequest{ id } } } } } }
                }`, { owner: OWNER, number: PROJECT_NUMBER });
              itemId = search.user.projectV2.items.nodes.find(n => n.content?.id === nodeId)?.id;
              if(!itemId) { core.setFailed("Project item not found"); return; }
            }

            // Decide target status
            let target = null;

            if(isIssueEvt){
              const labels = (context.payload.issue.labels || []).map(l => l.name.toLowerCase());
              if(labels.some(l => l.startsWith("type:"))) target = "Triaged";
              if(labels.includes("prio:p1")) target = "Ready";
              if(context.payload.action === "reopened") target = "Inbox";
              if(context.payload.action === "closed") target = "Done";
            }else{
              const action = context.payload.action;
              if(action === "opened") target = "In Progress";
              if(action === "ready_for_review" || action === "review_requested") target = "Review";
              if(action === "closed" && context.payload.pull_request.merged) target = "Done";
            }

            if(!target){ core.info("No status change for this event."); return; }

            const option = opt(target) || opt("Inbox");
            await github.graphql(`
              mutation($pid:ID!,$iid:ID!,$fid:ID!,$oid:String!){
                updateProjectV2ItemFieldValue(input:{
                  projectId:$pid, itemId:$iid, fieldId:$fid,
                  value:{ singleSelectOptionId:$oid }
                }){ clientMutationId }
              }`, { pid: project.id, iid: itemId, fid: status.id, oid: option.id });

            core.info(`✅ Set Status → ${target}`);
